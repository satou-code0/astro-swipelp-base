---
import Layout from '../layouts/Layout.astro';
import { HeroSection } from '../components/HeroSection';
import { ServiceSection } from '../components/ServiceSection';
import { ContactSection } from '../components/ContactSection';

// Welcome to Astro! Wondering what to do next? Check out the Astro documentation at https://docs.astro.build
// Don't want to use any of this? Delete everything in this file, the `assets`, `components`, and `layouts` directories, and start fresh.
---

<Layout title="スワイプ型ランディングページ">
	<main class="h-screen overflow-y-scroll snap-y snap-mandatory">
		<HeroSection client:load />
		<ServiceSection client:load />
		<ContactSection client:load />
	</main>
</Layout>

<style>
	/* スナップスクロールの動作をスムーズにする */
	main {
		scroll-behavior: smooth;
	}

	/* スクロールバーのカスタマイズ */
	main::-webkit-scrollbar {
		width: 8px;
	}

	main::-webkit-scrollbar-track {
		background: #f1f1f1;
	}

	main::-webkit-scrollbar-thumb {
		background: #888;
		border-radius: 4px;
	}

	main::-webkit-scrollbar-thumb:hover {
		background: #555;
	}
</style>

<script>
	// キーボード操作のサポート
	document.addEventListener('keydown', (e) => {
		const sections = document.querySelectorAll('section');
		const currentSection = Array.from(sections).findIndex(section => {
			const rect = section.getBoundingClientRect();
			return rect.top >= 0 && rect.top <= window.innerHeight / 2;
		});

		if (e.key === 'ArrowDown' && currentSection < sections.length - 1) {
			sections[currentSection + 1].scrollIntoView({ behavior: 'smooth' });
		} else if (e.key === 'ArrowUp' && currentSection > 0) {
			sections[currentSection - 1].scrollIntoView({ behavior: 'smooth' });
		}
	});

	// タッチスワイプのサポート
	let touchStartY = 0;
	let touchEndY = 0;
	const main = document.querySelector('main');

	main?.addEventListener('touchstart', (e) => {
		touchStartY = e.touches[0].clientY;
	});

	main?.addEventListener('touchend', (e) => {
		touchEndY = e.changedTouches[0].clientY;
		handleSwipe();
	});

	function handleSwipe() {
		const swipeDistance = touchEndY - touchStartY;
		const threshold = 50; // スワイプ判定の閾値

		if (Math.abs(swipeDistance) < threshold) return;

		const sections = document.querySelectorAll('section');
		const currentSection = Array.from(sections).findIndex(section => {
			const rect = section.getBoundingClientRect();
			return rect.top >= 0 && rect.top <= window.innerHeight / 2;
		});

		if (swipeDistance > 0 && currentSection < sections.length - 1) {
			// 下スワイプ
			sections[currentSection + 1].scrollIntoView({ behavior: 'smooth' });
		} else if (swipeDistance < 0 && currentSection > 0) {
			// 上スワイプ
			sections[currentSection - 1].scrollIntoView({ behavior: 'smooth' });
		}
	}
</script>
